server:
  context-path: /quickstart
  port: 8080
endpoints:
  jmx:
    domain: quickstart
spring:
  application:
    name: quickstart
  jmx:
    default-domain: quickstart
  #proxy-target-class: true这个选项不要开，否则会导致数据源切换失效
  aop:
    auto: true
#  datasource:
#    #Druid数据源配置
#    druid:
#      #配置WebStatFilter
#      web-stat-filter:
#        session-stat-enable: false
#        url-pattern: "/*"
#        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/"
#        enabled: true
##        profile-enable: dev
#      #配置_StatViewServlet
#      stat-view-servlet:
#        allow: null
#        deny: null
#        url-pattern: /druid/*
#        reset-enable: false
#        #druid页面登录用户名
#        login-password: admin
#        #druid页面登录密码
#        login-username: admin
#        enabled: true
#      # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
#      aop-patterns: com.company.project.service.*
#      driver-class-name: com.mysql.jdbc.Driver
#      initial-size: 10
#      min-idle: 5
#      max-active: 100
#      max-wait: 10000
#      validation-query: SELECT 1
#      validation-query-timeout: 10000
#      time-between-eviction-runs-millis: 30000
#      #建议配置为true，不影响性能，并且保证安全性。
#      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
#      test-while-idle: true
#      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
#      test-on-borrow: true
#      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
#      test-on-return: false
#      #示例配置，读库
#      write:
#        name: write
#        url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false
#        username: root
#        password: root
#      #示例配置，写库
#      read:
#        name: read
#        url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false
#        username: root
#        password: root
      #示例配置，日志库
#      log:
#        name: log
#        url: jdbc:mysql://localhost:3306/tab_log?useUnicode=true&characterEncoding=utf8&useSSL=false
#        username: root
#        password: root
      #示例配置，日志库
#      quartz:
#        name: quartz
#        url: jdbc:mysql://localhost:3306/tab_quartz?useUnicode=true&characterEncoding=utf8&useSSL=false
#        username: root
#        password: root
#  redis:
#    password: null
#    database: 0
#    port: 6379
#    pool:
#      max-idle: 100
#      min-idle: 0
#      max-active: 300
#      max-wait: 1000
#    host: localhost
#    timeout: 10000
  swagger:
    #是否展示swagger API文档
    enable: true
    bask-package: com.company.project
redisson:
  singleServerConfig:
    address: "redis://127.0.0.1:6379"
#    idleConnectionTimeout: 10000
#    pingTimeout: 1000
#    connectTimeout: 10000
#    timeout: 3000
#    retryAttempts: 3
#    retryInterval: 1500
#    reconnectionTimeout: 3000
#    failedAttempts: 3
#    password: null
#    subscriptionsPerConnection: 5
#    clientName: test
#    address: "redis://127.0.0.1:6379"
#    subscriptionConnectionMinimumIdleSize: 1
#    subscriptionConnectionPoolSize: 50
#    connectionMinimumIdleSize: 32
#    connectionPoolSize: 64
#    database: 0
#    dnsMonitoring: false
#    dnsMonitoringInterval: 5000
#    threads: 0
#    nettyThreads: 0
#    codec: !<org.redisson.codec.JsonJacksonCodec> {}
#    transportMode: NIO

# 分库分表
# http://shardingsphere.io/document/current/cn/manual/sharding-jdbc/configuration/config-spring-boot/
sharding:
  jdbc:
    datasource:
      ds0:
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds0
        username: root
      ds1:
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ds1
        username: root
      names: ds0,ds1
    config:
      sharding:
        # 根据user_id取模分库, 且根据order_id取模分表
        binding-tables: 
         - t_order,t_order_item
        tables:
          t_order_item:
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: t_order_item$->{order_id % 2}
            key-generator-column-name: order_item_id
            actual-data-nodes: ds$->{0..1}.t_order_item$->{0..1}
          t_order:
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: t_order$->{order_id % 2}
            key-generator-column-name: order_id
            actual-data-nodes: ds$->{0..1}.t_order$->{0..1}
        default-database-strategy:
          inline:
            sharding-column: user_id
            algorithm-expression: ds$->{user_id % 2}
        default-key-generator-class-name: io.shardingsphere.core.keygen.DefaultKeyGenerator
        broadcast-tables: 
         - t_config